#!/bin/sh
# mirage2iso
# (c) 2009 Michał Górny
# released under 3-clause BSD license

PN=mirage2iso
PV=0.3

FC_CONFIG_H=mirage-config.h

conf_get_tests() {
	fc_try_link getopt \
		'#define _GNU_SOURCE 1\n#include <getopt.h>' \
		'getopt_long(argc, argv, "", 0, 0); return 0;'
	fc_try_link sysexits \
		'#include <sysexits.h>' \
		'return EX_OK + EX_IOERR;'
	fc_try_link mmapio \
		'#define _POSIX_C_SOURCE 200112L\n#include <unistd.h>\n#include <sys/types.h>\n#include <sys/mman.h>' \
		'return (ftruncate(0, 0) || mmap(0, 0, 0, 0, 0, 0) == MAP_FAILED);'
	fc_try_link falloc \
		'#define _POSIX_C_SOURCE 200112L\n#include <fcntl.h>' \
		'return fallocate(0, 0, 0);'
	fc_try_link termios \
		'#define _POSIX_C_SOURCE 200112L\n#include <stdio.h>\n#include <termios.h>\n#include <unistd.h>' \
		'struct termios term; return tcgetattr(fileno(stdin), &term);'

	if [ ${WITH_ASSUAN} -eq 1 ]; then
		fc_export ASSUAN_CPPFLAGS "${ASSUAN_CPPFLAGS}"
		fc_export ASSUAN_LIBS "${ASSUAN_LIBS}"

		fc_try_link assuan \
			'#define _ISO_C99_SOURCE 1\n#include <assuan.h>' \
			'assuan_context_t ctx; assuan_error_t ret = assuan_pipe_connect(&ctx, "/bin/true", 0, 0); assuan_disconnect(ctx); return ret;' \
			'$(ASSUAN_CPPFLAGS)' '$(ASSUAN_LIBS)'
		fc_try_link assuan2 \
			'#define _ISO_C99_SOURCE 1\n#include <gpg-error.h>\n#include <assuan.h>' \
			'assuan_context_t ctx; assuan_new(&ctx); gpg_error_t ret = assuan_pipe_connect(ctx, "/bin/true", 0, 0, 0, 0, 0); assuan_release(ctx); return ret;' \
			'$(ASSUAN_CPPFLAGS)' '$(ASSUAN_LIBS)'
	fi

	if [ ${ENABLE_LFS} -eq 1 ]; then
		touch lfs-enabled
	fi
}

conf_check_results() {
	if [ -f lfs-enabled ]; then
	    echo "Enabling Large File Support (if available)." >&2
		fc_def _LARGEFILE_SOURCE
		fc_def _LARGEFILE64_SOURCE
		fc_def _FILE_OFFSET_BITS 64
		rm -f lfs-enabled
	fi

	fc_check getopt 'getopt_long()' || fc_def NO_GETOPT_LONG
	fc_check sysexits '<sysexits.h>' || fc_def NO_SYSEXITS
	fc_check mmapio 'mmap() & ftruncate()' || fc_def NO_MMAPIO
	fc_check falloc 'posix_fallocate()' || fc_def NO_FALLOCATE
	fc_check termios 'termios' || fc_def NO_TERMIOS
	if ! fc_check assuan2 'assuan-2'; then
		fc_def NO_ASSUAN2
		fc_check assuan 'assuan' || fc_def NO_ASSUAN
	fi
}

conf_get_exports() {
	local cppflags libs

	cppflags=$(pkg-config --cflags libmirage)
	libs=$(pkg-config --libs-only-l libmirage)

	if fc_check assuan2 || fc_check assuan; then
		cppflags="${cppflags} \$(ASSUAN_CPPFLAGS)"
		libs="${libs} \$(ASSUAN_LIBS)"
	fi

	fc_export CONF_CPPFLAGS "${cppflags}"
	fc_export CONF_LDFLAGS "$(pkg-config --libs-only-L --libs-only-other libmirage)"
	fc_export CONF_LIBS "${libs}"
}

conf_help() {
	cat <<_EOF_
	--without-assuan	Disable use of assuan
	--disable-lfs		Disable Large File Support
_EOF_
}

unset WITH_ASSUAN ENABLE_LFS

conf_arg_parse() {
	case "${1}" in
		--with-assuan)
			WITH_ASSUAN=1
			;;
		--without-assuan)
			WITH_ASSUAN=0
			;;
		--enable-lfs)
			ENABLE_LFS=1
			;;
		--disable-lfs)
			ENABLE_LFS=0
			;;
		*)
			return 1
	esac

	return 0
}

conf_cmdline_parsed() {
	: ${WITH_ASSUAN:=1}
	: ${ENABLE_LFS:=1}

	if [ ${WITH_ASSUAN} -eq 1 ]; then
		# Both can fail
		ASSUAN_CPPFLAGS=$(libassuan-config --cflags 2>/dev/null)
		ASSUAN_LIBS=$(libassuan-config --libs 2>/dev/null)
		: ${ASSUAN_LIBS:=-lassuan} # fallback
	fi
}

if ! pkg-config --exists libmirage; then
	echo "Your pkg-config is unable to find libmirage." >&2
	echo >&2
	echo "To be able to build mirage2iso, you need to have both pkg-config" >&2
	echo "and libmirage with development headers installed." >&2
	exit 1
else
	echo 'libmirage found.'
fi

. ./fastconf.sh
